###
# JPA Configuration
###
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true
# This will be controlled by liquibase migrations
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

##
# Spring datasource
##
spring.datasource.url=jdbc:postgresql://localhost:5432/email_scheduler_db
spring.datasource.username=postgres
spring.datasource.password=root

# Hikari datasource pool
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

###
# HikariCP settings
# spring.datasource.hikari.*
###
spring.datasource.hikari.pool-name=HikariConnectionPool
#60 sec
spring.datasource.hikari.connection-timeout=60000
# min 5
spring.datasource.hikari.minimum-idle=5
# max 10
spring.datasource.hikari.maximum-pool-size=10

##
# Quartz configurations
##
spring.quartz.job-store-type=jdbc

# When the JDBC store is used, the schema can be initialized on startup using the below property
# WARNING:
# By default, the database is detected and initialized by using the standard scripts provided with the Quartz library. 
# These scripts drop existing tables, deleting all triggers on every restart. It is also possible to provide a custom 
# script by setting the spring.quartz.jdbc.schema property.
spring.quartz.jdbc.initialize-schema=always

spring.quartz.properties.org.quartz.threadPool.threadCount=2
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
spring.quartz.properties.org.quartz.jobStore.isClustered=true
#spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO


##
# Mail configurations
##
#spring.mail.host=
#spring.mail.port=587
#spring.mail.username=
#spring.mail.password=
#
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true